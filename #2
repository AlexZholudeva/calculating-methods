import math
import random


def f(x):
    return math.log(1 + x)


print("Задача алгебраического интерполирования. Вариант 2")

# Запрос на ввод числа значений в таблице и концов отрезка [a, b]
m0 = int(input("Введите число значений m+1 в таблице: "))
m = m0 - 1
a = float(input("Введите начало отрезка [a, b] a="))
b = float(input("Введите конец отрезка [a, b] b="))

# Создание таблицы значений функции
table = []
if m == 0:
    z = (a + b) / 2
    table.append((z, f(z)))
else:
    step = (b - a) / m
    for j in range(m + 1):
        z = a + j * step
        # Используем random.sample для генерации попарно-различных узлов
        while z in [t[0] for t in table]:
            z = random.uniform(a, b)
        table.append((z, f(z)))

# Вывод таблицы
print("Таблица значений функции f(x) в узлах интерполяции:")
for j in range(m + 1):
    print(f"z{j} = {table[j][0]:.4f}\tf(z{j}) = {table[j][1]:.4f}")


def solution(table):
    # запрос на ввод точки интерполирования x и степени интерполяционного многочлена n
    x = float(input("Введите значение точки интерполирования x: "))
    n = int(input(f"Введите степень интерполяционного многочлена (n ≤ {m}): "))

    # проверка введенной степени интерполяционного многочлена
    while n > m:
        print(f"Введено недопустимое значение n! n должно быть не больше {m}.")
        n = int(input(f"Введите степень интерполяционного многочлена (n ≤ {m}): "))

    # сортировка таблицы значений по удаленности от точки интерполирования x
    table = sorted(table, key=lambda tup: abs(tup[0] - x))

    # вывод отсортированной таблицы узлов
    print("Отсортированная таблица узлов:")
    for j in range(m + 1):
        print(f"z{j} = {table[j][0]:.4f}\tf(z{j}) = {table[j][1]:.4f}")

    # вычисление интерполяционного многочлена
    xn = [table[i][0] for i in range(n + 1)]
    fn = [table[i][1] for i in range(n + 1)]

    # вычисление разделенных разностей
    for j in range(1, n + 1):
        for i in range(n, j - 1, -1):
            fn[i] = (fn[i] - fn[i - 1]) / (xn[i] - xn[i - j])

    # вычисление значения интерполяционного многочлена в точке x
    Pn = fn[n]
    for i in range(n - 1, -1, -1):
        Pn = fn[i] + (x - xn[i]) * Pn

    # вывод результата
    print(f"\nЗначение интерполяционного многочлена Pn(x) в точке x = {x}:\n")
    print(f"Pn({x}) = {Pn:.4f}")

    # Сортировка таблицы по удалению от точки x
    table.sort(key=lambda row: abs(row[0] - x))

    # Выделение первых (n+1) строк отсортированной таблицы
    nodes = table[:n + 1]

    # Построение многочлена Лагранжа
    PnL = 0
    for j in range(n + 1):
        Lj = 1
        for k in range(n + 1):
            if k != j:
                Lj *= (x - nodes[k][0]) / (nodes[j][0] - nodes[k][0])
        PnL += nodes[j][1] * Lj

    # Вычисление погрешности для многочлена Лагранжа
    efnL = abs(f(x) - PnL)

    # Построение таблицы разделенных разностей
    diff_table = [[nodes[i][1] if j == 0 else 0 for j in range(n + 2)] for i in range(n + 1)]
    for j in range(1, n + 2):
        for i in range(j - 1, n + 1):
            diff_table[i][j] = (diff_table[i][j - 1] - diff_table[i - 1][j - 1]) / (nodes[i][0] - nodes[i - j + 1][0])

    # Построение многочлена Ньютона
    PnN = nodes[0][1]
    for j in range(1, n + 1):
        nj = 1
        for i in range(j):
            nj *= (x - nodes[i][0])
        PnN += diff_table[j - 1][j + 1] * nj

    # Вычисление погрешности для многочлена Ньютона
    efnN = abs(f(x) - PnN)

    # Вывод результатов
    print("Значение PnL(x) = {:.6f}".format(PnL))
    print("Фактическая погрешность efn(x) = {:.6f}".format(efnL))
    print("Значение PnN(x) = {:.6f}".format(PnN))
    print("Фактическая погрешность efn(x) = {:.6f}\n".format(efnN))


# Предложение пользователю ввести новые значения x и n или выйти из программы
while True:
    answer = input("Хотите продолжить? (да/нет) ")
    if answer.lower() == "да":
        solution(table)
    elif answer.lower() == "нет":
        print("До свидания!")
        break
    else:
        print("Некорректный ответ. Пожалуйста, введите 'да' или 'нет'.")
